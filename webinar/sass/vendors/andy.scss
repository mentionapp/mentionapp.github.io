/* -----------------------------------------------

Andy.SCSS: Open-Source Collection of Useful SASS Mixins Library.

URL: http://gillesbertaux.com/andy

By: Gilles Bertaux | http://gillesbertaux.com | @gillesbertaux

The purpose of Andy is to gather useful mixins and avoid endless research or heavy framework use. Feel free to fork it on Github and add your own mixins: https://github.com/gillesbertaux/andy

Mixins available:
  - Background Gradient
  - Background Size
  - Borders
  - Border Corners
  - Box Sizing
  - Center Block
  - Centering Block: Horizontal, Vertical, Both
  - Clearfix
  - Div Outline
  - Font Face
  - Hardware Acceleration
  - Hover
  - Image Retina
  - Line-Height
  - Media Queries
  - Opacity
  - Opacity Black
  - Opacity White
  - Position
  - Radius
  - Scale
  - Shadows
  - Size
  - Text Shadow
  - TranslateX
  - TranslateY
  - Transitions

 ----------------------------------------------- */

/* BACKGROUND GRADIENTS */

// usage example: @include background-gradient(red, black, vertical)

@mixin background-gradient($startcolor, $endcolor, $orientation) {
    background: $startcolor;
    @if $orientation == vertical {
    // vertical
      background: -moz-linear-gradient(top,  $startcolor 0%, $endcolor 100%);
      background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
      background: -webkit-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
      background: -o-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
      background: -ms-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
      background: linear-gradient(to bottom,  $startcolor 0%,$endcolor 100%);
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=0 );
    }
    @else if $orientation == horizontal
    {
    // horizontal
      background: -moz-linear-gradient(left,  $startcolor 0%, $endcolor 100%);
      background: -webkit-gradient(linear, left top, right top, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
      background: -webkit-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
      background: -o-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
      background: -ms-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
      background: linear-gradient(to right,  $startcolor 0%,$endcolor 100%);
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=1 );
    }
    @else
    {
    // radial
      background: -moz-radial-gradient(center, ellipse cover,  $startcolor 0%, $endcolor 100%);
      background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
      background: -webkit-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
      background: -o-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
      background: -ms-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
      background: radial-gradient(ellipse at center,  $startcolor 0%,$endcolor 100%);
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=1 );
    }
}

/* BACKGROUND SIZE */

// usage example: @include background-size(100%, 100%);

@mixin background-size($width, $height) {
     -moz-background-size: $width $height;
  -webkit-background-size: $width $height;
          background-size: $width $height;
}

/* BORDER */

// usage example: @include border(2px, solid, #000);

@mixin border($thickness, $type, $color) { border: $thickness $type $color; }

/* BORDER CORNERS */

// usage example: @include border(100%, 100%, 0, 0);

@mixin border-radius-separate($topLeftRadius, $topRightRadius, $bottomLeftRadius, $bottomRightRadius) {
  -webkit-border-top-left-radius: $topLeftRadius;
  -webkit-border-top-right-radius: $topRightRadius;
  -webkit-border-bottom-right-radius: $bottomRightRadius;
  -webkit-border-bottom-left-radius: $bottomLeftRadius;

  -moz-border-radius-topleft: $topLeftRadius;
  -moz-border-radius-topright: $topRightRadius;
  -moz-border-radius-bottomright: $bottomRightRadius;
  -moz-border-radius-bottomleft: $bottomLeftRadius;

  border-top-left-radius: $topLeftRadius;
  border-top-right-radius: $topRightRadius;
  border-bottom-right-radius: $bottomRightRadius;
  border-bottom-left-radius: $bottomLeftRadius;
}

/* BOX SIZING */

// usage example: @include box-sizing(border-box);

@mixin box-sizing($type) {
  -webkit-box-sizing:$type;
  -moz-box-sizing:$type;
  box-sizing:$type;
}

/* CENTER BLOCK */

@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

/* CENTERING BLOCKS ELEMENTS, HORIZONTAL, VERTICAL, BOTH */

// Important: you must have a parent element with position: relative.

@mixin center-both {
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
}

// if height is defined.
@mixin center-h($height) {
  position: absolute;
  top: 50%;
  height: $height;
  margin-top: -$height/2;
}

// if height is unknown.
@mixin center-h--unk {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

/* CLEARFIX */

@mixin clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

/* CONTAINER */

@mixin container($max-width, $width) {
  max-width: $max-width;
  width: $width;
  margin: 0 auto;
}

/* COLUMNS */

@mixin columns($nb, $gap:false, $width:false) {
  -webkit-column-count: $nb; /* Chrome, Safari, Opera */
  -moz-column-count: $nb; /* Firefox */
  column-count: $nb;
  
  -webkit-column-gap: $gap; /* Chrome, Safari, Opera */
  -moz-column-gap: $gap; /* Firefox */
  column-gap: $gap;

  -webkit-column-rule-width: $width; /* Chrome, Safari, Opera */
  -moz-column-rule-width: $width; /* Firefox */
  column-rule-width: $width;
}

/* DIV OUTLINE */

@mixin outline {
  box-shadow: rgba(255, 255, 255, 0.5) 0 1px 0, inset rgba(0, 0, 0, 0.75) 0 1px 0;
}

/* FLEX */

@mixin flex($display, $justify, $wrap) {
  display: $display; justify-content: $justify; flex-wrap: $wrap;
}

/* FONT FACES */

// usage example: @include font-face(gotham,/fonts/gotham.eot,/fonts/gotham.woff,/fonts/gotham.ttf,/fonts/gotham.svg, 300, normal);

@mixin font-face($fontFamily, $eotFileSrc, $woffFileSrc, $ttfFileSrc, $svgFileSrc, $weight, $style) {
  font-family: $fontFamily;
  src: url($eotFileSrc)  format('eot'),
       url($woffFileSrc) format('woff'),
       url($ttfFileSrc)  format('truetype'),
       url($svgFileSrc)  format('svg');
  font-weight: $weight;
  font-style: $style;
}

/* FONT SIZE */

// usage example: @include fontsize(16px);
//            or: @include fontsize(16);

@mixin fontsize($size) {
  $base: 16px !default;
  @if (unitless($size)){
    $size: $size * 1px;
  }
  font-size: $size;
  font-size: ($size / $base) * 1rem;
}

/* HARDWARE ACCELERATION */

@mixin ha {
  -webkit-transform: translate3d(0,0,0);
  -ms-transform: translate3d(0,0,0);
  -o-transform: translate3d(0,0,0);
  transform: translate3d(0,0,0);
}

/* HOVER */

// usage example: @include hover(.3s);

@mixin hover($time, $timing-function: ease-in-out) {
  -webkit-transition: all $time $timing-function;
  -o-transition: all $time $timing-function;
  -moz-transition: all $time $timing-function;
  transition: all $time $timing-function;
}

/* HIGHLIGHT */

@mixin highlight {
  background: $primary-light;
  border-top: 1px solid #eee; 
  border-bottom: 1px solid #eee; 
}

/* IMAGE RETINA */

// usage example: @include image-2x(/img/image.png, 100%, auto);

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

/* LINE HEIGHT */

// usage example: @include line-height(16);

@mixin line-height($heightValue: 12 ){
  line-height: $heightValue + px; //fallback for old browsers
  line-height: (0.125 * $heightValue) + rem;
}

/* MEDIA QUERIES */

// usage example: @include mquery(350px, 2) { width: 100%; }

@mixin mquery($width, $ratio: false) {
  @if $ratio {
      @media
      only screen and (max-width: $width) and  (min--moz-device-pixel-ratio: $ratio),
      only screen and (max-width: $width) and  (-webkit-min-device-pixel-ratio: $ratio),
      only screen and (max-width: $width) and  (min-device-pixel-ratio: $ratio) {
        @content;
      }
  } @else {
      @media only screen and (max-width: $width) {
        @content;
      }
  }
}

@mixin mquery-r($ratio) {
  @media
    only screen and (-webkit-min-device-pixel-ratio: $ratio),
    only screen and (min--moz-device-pixel-ratio: $ratio),
    only screen and (-o-min-device-pixel-ratio: $ratio),
    only screen and (min-device-pixel-ratio: $ratio) {
      @content;
  }
}

@mixin minquery($width, $ratio: false) {
  @if $ratio {
      @media
      only screen and (min-width: $width) and  (min--moz-device-pixel-ratio: $ratio),
      only screen and (min-width: $width) and  (-webkit-min-device-pixel-ratio: $ratio),
      only screen and (min-width: $width) and  (min-device-pixel-ratio: $ratio) {
        @content;
      }
  } @else {
      @media only screen and (min-width: $width) {
        @content;
      }
  }
}

/* OPACITY */

@mixin opacity($opacity) {
  opacity: $opacity;
  filter: alpha(opacity=($opacity * 100));
}

/* BLACK / WHITE OPACITY */

// usage example: div { border: 1px solid black(.2); }

@function black($opacity) {
  @return rgba(0,0,0,$opacity);
}

@function white($opacity) {
  @return rgba(255,255,255,$opacity);
}

/* POSITION */

// usage example: @include position(absolute, 10px, null, 10px, 10px);

@mixin position($type,$left,$right,$top,$bottom) {
  position: $type;
  left: $left;
  right: $right;
  top: $top;
  bottom: $bottom;
}

/* RADIUS */

@mixin radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

/* SCALE */

// usage example: @include scale(2);

@mixin scale($value) {
  -ms-transform: scale($value);
  -webkit-transform: scale($value);
  transform: scale($value);
}

/* SHADOWS */

// usage examples: @include shadow(black, 5px 5px 0px 3px);
//             or: @include shadow(blue, 2px 3px 2px 2px, inset);

@mixin shadow($color, $x-y-blur-spread:10px 10px 30px 0px, $inset:false) {
  @if ($inset == inset) {
      -moz-box-shadow: inset $x-y-blur-spread $color;
      -webkit-box-shadow: inset $x-y-blur-spread $color;
      -o-box-shadow: inset $x-y-blur-spread $color;
      box-shadow: inset $x-y-blur-spread $color;
  }
  @else {
      -moz-box-shadow: $x-y-blur-spread $color;
      -webkit-box-shadow: $x-y-blur-spread $color;
      -o-box-shadow: $x-y-blur-spread $color;
      box-shadow: $x-y-blur-spread $color;
  }
}

/* SIZE */

// usage example: @include size(350px, 350px);

@mixin size($width, $height) {
   width: $width;
   height: $height;
}

/* TEXT SHADOW */

@mixin textshadow($value) {
   text-shadow: rgba(255, 255, 255, $value) 0 1px 0;
}

/* TRANSLATE X */

@mixin translateX($value) {
  -webkit-transform: translateX($value);
  -ms-transform: translateX($value);
  -o-transform: translateX($value);
  transform: translateX($value);
}

/* TRANSLATE Y */

@mixin translateY($value) {
  -webkit-transform: translateY($value) translateZ(0) translateX(0) rotate(0.02deg);
  -ms-transform: translateY($value) translateZ(0) translateX(0) rotate(0.02deg);
  -moz-transform: translateY($value) translateZ(0) translateX(0) rotate(0.02deg);
  -o-transform: translateY($value) translateZ(0) translateX(0) rotate(0.02deg);
  transform: translateY($value) translateZ(0) translateX(0) rotate(0.02deg);
}

/* TRANSLATE Y + SCALE */

@mixin translateScale($y, $s) {
  -webkit-transform: translateY($y) scale($s);
  -ms-transform: translateY($y) scale($s);
  -o-transform: translateY($y) scale($s);
  transform: translateY($y) scale($s);
}

/* TRANSITION SCALEDOWN */

@mixin scaleDown($time:1s) {
  -webkit-animation: scaleDown $time ease-out 1;
  animation: scaleDown $time ease-out 1;
}

@keyframes scaleDown {
  0% { @include scale(1); }
  50% { @include scale(.95); };
  100% { @include scale(1); };
}

@-webkit-keyframes scaleDown {
  0% { @include scale(1); }
  50% { @include scale(.95); };
  100% { @include scale(1); };
}

/* TRANSITION SCALE UP HOVER */

@mixin scaleUp($time:1s) {
  -webkit-animation: scaleUp $time ease-in-out 1;
  animation: scaleUp $time ease-in-out 1;
}

@keyframes scaleUp {
  0% { @include scale(0); }
  50% { @include scale(1.1); };
  100% { @include scale(1); };
}

@-webkit-keyframes scaleUp {
  0% { @include scale(0); }
  50% { @include scale(1.1); };
  100% { @include scale(1); };
}

/* TRANSITION FADEIN */

@mixin fadeIn($time:1s) {
  -webkit-animation: fadeIn $time ease-out 1;
  animation: fadeIn $time ease-out 1;
}

@keyframes fadeIn {
  0% { opacity: 0; }
  to { opacity: 1; };
}

@-webkit-keyframes fadeIn {
  0% { opacity: 0; }
  to { opacity: 1; };
}

/* SHAKE */

@mixin shaky($time) {
  animation-name: shakeitup;
  animation-duration: $time;
  transform-origin:50% 50%;
  animation-timing-function: linear;
  -webkit-animation-name: shakeitup;
  -webkit-animation-duration: $time;
  -webkit-transform-origin:50% 50%;
  -webkit-animation-timing-function: linear;
}

@-webkit-keyframes shakeitup {
  0%    { -webkit-transform: translate(2px, 1px) rotate(0deg); }
  10%   { -webkit-transform: translate(-1px, -2px) rotate(-1deg); }
  20%   { -webkit-transform: translate(-3px, 0px) rotate(1deg); }
  30%   { -webkit-transform: translate(0px, 2px) rotate(0deg); }
  40%   { -webkit-transform: translate(1px, -1px) rotate(1deg); }
  50%   { -webkit-transform: translate(-1px, 2px) rotate(-1deg); }
  60%   { -webkit-transform: translate(-3px, 1px) rotate(0deg); }
  70%   { -webkit-transform: translate(2px, 1px) rotate(-1deg); }
  80%   { -webkit-transform: translate(-1px, -1px) rotate(1deg); }
  90%   { -webkit-transform: translate(2px, 2px) rotate(0deg); }
  100%  { -webkit-transform: translate(1px, -2px) rotate(-1deg); }
}

@-webkit-keyframes shakeitup {
  0%    { transform: translate(2px, 1px) rotate(0deg); }
  10%   { transform: translate(-1px, -2px) rotate(-1deg); }
  20%   { transform: translate(-3px, 0px) rotate(1deg); }
  30%   { transform: translate(0px, 2px) rotate(0deg); }
  40%   { transform: translate(1px, -1px) rotate(1deg); }
  50%   { transform: translate(-1px, 2px) rotate(-1deg); }
  60%   { transform: translate(-3px, 1px) rotate(0deg); }
  70%   { transform: translate(2px, 1px) rotate(-1deg); }
  80%   { transform: translate(-1px, -1px) rotate(1deg); }
  90%   { transform: translate(2px, 2px) rotate(0deg); }
  100%  { transform: translate(1px, -2px) rotate(-1deg); }
}

/* SHAKE SMOOTH */

@mixin shaky-smooth($time) {
  animation: shakesmooth $time ease-in-out infinite;
  -webkit-animation: shakesmooth $time ease-in-out infinite;
}

@-webkit-keyframes shakesmooth {
  0%    { -webkit-transform: rotate(0.02deg) translateY(-2px); }
  10%   { -webkit-transform: rotate(0deg) translateY(2px); }
  20%   { -webkit-transform: rotate(0deg) translateY(-2px); }
  30%   { -webkit-transform: rotate(0.02deg) translateY(2px); }
  40%   { -webkit-transform: rotate(0deg) translateY(-2px); }
  50%   { -webkit-transform: rotate(0.02deg) translateY(2px); }
  60%   { -webkit-transform: rotate(0deg) translateY(-2px); }
  70%   { -webkit-transform: rotate(0.02deg) translateY(2px); }
  80%   { -webkit-transform: rotate(0deg) translateY(-2px); }
  90%   { -webkit-transform: rotate(0.02deg) translateY(2px); }
  100%  { -webkit-transform: rotate(0deg) translateY(-2px); }
}

@keyframes shakesmooth {
  0%    { transform: rotate(0.02deg) translateY(-2px); }
  10%   { transform: rotate(0deg) translateY(2px); }
  20%   { transform: rotate(0deg) translateY(-2px); }
  30%   { transform: rotate(0.02deg) translateY(2px); }
  40%   { transform: rotate(0deg) translateY(-2px); }
  50%   { transform: rotate(0.02deg) translateY(2px); }
  60%   { transform: rotate(0deg) translateY(-2px); }
  70%   { transform: rotate(0.02deg) translateY(2px); }
  80%   { transform: rotate(0deg) translateY(-2px); }
  90%   { transform: rotate(0.02deg) translateY(2px); }
  100%  { transform: rotate(0deg) translateY(-2px); }
}

/* TRANSITION SLIDEINDOWN */

@-webkit-keyframes slideInDown {
  0% { @include translateY(-50px); opacity: 0; }
  75% { @include translateY(0); }
  100% { opacity: 1; }
}

@keyframes slideInDown {
  0% { @include translateY(-50px); opacity: 0; }
  75% { @include translateY(0); }
  100% { opacity: 1; }
}

@mixin slideInDown($time) {
  animation: slideInDown $time ease-in-out;
  -webkit-animation: slideInDown $time ease-in-out;
}

/* TRANSITION SLIDEINUP */

@-webkit-keyframes slideInUp {
  0% { @include translateY(100px); opacity: 0; }
  75% { @include translateY(0); }
  100% { opacity: 1; }
}

@keyframes slideInUp {
  0% { @include translateY(100px); opacity: 0; }
  75% { @include translateY(0); }
  100% { opacity: 1; }
}

@mixin slideInUp($time) {
  animation: slideInUp $time ease-in-out;
  -webkit-animation: slideInUp $time ease-in-out;
}

/* TRANSITION SLIDEINRIGHT */

@-webkit-keyframes slideInRight {
  0% { @include translateX(100px); opacity: 0; }
  75% { @include translateX(0); }
  100% { opacity: 1; }
}

@keyframes slideInRight {
  0% { @include translateX(100px); opacity: 0; }
  75% { @include translateX(0); }
  100% { opacity: 1; }
}

@mixin slideInRight($time) {
  animation: slideInRight $time ease-out backwards;
  -webkit-animation: slideInRight $time ease-out backwards;
}

/* TRANSITION SLIDEINLEFT */

@-webkit-keyframes slideInLeft {
  0% { @include translateX(-100px); opacity: 0; }
  75% { @include translateX(0); }
  100% { opacity: 1; }
}

@keyframes slideInRight {
  0% { @include translateX(-100px); opacity: 0; }
  75% { @include translateX(0); }
  100% { opacity: 1; }
}

@mixin slideInLeft($time) {
  animation: slideInRight $time ease-out backwards;
  -webkit-animation: slideInRight $time ease-out backwards;
}
